Q1:
#include <stdio.h>
#include <stdlib.h>

int main(int argc,char *argv[]){

int a=atoi(argv[1]);
int b=atoi(argv[2]);

printf("Value of a before swap : %d",a);
printf("\n");
printf("Value of b before swap : %d",b);
printf("\n\n\n");

int temp = a;
a=b;
b=temp;

printf("Value of a after swap : %d",a);
printf("\n");
printf("Value of b after swap : %d",b);
printf("\n");

return 0;
}


Q2:
#include <stdio.h>
#include <stdlib.h>

struct dob {
	int day;
	int month;
	int year;
};

struct student_info{
	int roll;
	char name[50];
	float cgpa;
	struct dob age;
};

void print_byvalue(struct student_info s1){
	printf("\nPrinting by call by value\n");
	printf("Roll No. : %d\n",s1.roll);
	printf("Name : %s\n",s1.name);
	printf("CGPA : %.2f\n",s1.cgpa);
	printf("DOB : %d/%d/%d\n",s1.age.day,s1.age.month,s1.age.year);
}


void print_byaddress(struct student_info *s1){
	printf("\nPrinting by call by address\n");
	printf("Roll No. : %d\n",s1->roll);
	printf("Name : %s\n",s1->name);
	printf("CGPA : %.2f\n",s1->cgpa);
	printf("DOB : %d/%d/%d\n",s1->age.day,s1->age.month,s1->age.year);
}

int main(){
	struct student_info s1;
	printf("Enter Roll No. : ");
	scanf("%d",&s1.roll);
	printf("Enter Name : ");
	scanf(" %[^\n]",s1.name);
	printf("Enter CGPA : ");
	scanf("%f",&s1.cgpa);
	printf("Enter DOB (dd/mm/yy) : ");
	scanf("%d%d%d",&s1.age.day,&s1.age.month,&s1.age.year);
	
	print_byvalue(s1);
	print_byaddress(&s1);
	
	return 0;
}


Q3:
Method 1 -
// #include <stdio.h>

// int main(){
//     int n;
//     printf("Enter number : ");
//     scanf("%d",&n);
//     int a1,a2,a3,a4;
//     a1 = (n<<24)>>24;
//     a2 = (n<<16)>>24;
//     a3 = (n<<8)>>24;
//     a4 = n>>24;
//     printf("1st byte : %d\n", a1);
//     printf("2nd byte : %d\n", a2);
//     printf("3rd byte : %d\n", a3);
//     printf("4th byte : %d\n", a4);
//     return 0;
// }

Method 2 -
#include <stdio.h>

int main() {
    unsigned int num;
    printf("Enter a number: ");
    scanf("%u", &num);

    // Extracting each byte using bitwise operations
    unsigned char byte1 = (num & 0xFF);
    unsigned char byte2 = ((num >> 8) & 0xFF);
    unsigned char byte3 = ((num >> 16) & 0xFF);
    unsigned char byte4 = ((num >> 24) & 0xFF);

    // Printing the content of each variable
    printf("Byte 1: %u\n", byte1);
    printf("Byte 2: %u\n", byte2);
    printf("Byte 3: %u\n", byte3);
    printf("Byte 4: %u\n", byte4);

    return 0;
}



Q4:
#include <stdio.h>

struct pkt
{
    char ch1;
    char ch2[2];
    char ch3;
};

struct pkt toByte(int n)
{
    char a1, a2, a3, a4;
    a1 = (n & 0xFF);
    a2 = ((n >> 8) & 0xFF);
    a3 = ((n >> 16) & 0xFF);
    a4 = ((n >> 24) & 0xFF);
    struct pkt p1;
    p1 = (struct pkt){a1,{a2,a3},a4};
    return p1;
}

int toInteger(struct pkt p)
{
    return p.ch1 + (p.ch2[0] << 8) + (p.ch2[1] << 16) + (p.ch3 << 24);
}

int main()
{
    int n;
    printf("Enter number : ");
    scanf("%d", &n);
    struct pkt p = toByte(n);
    printf("1st byte : %u\n", p.ch1);
    printf("2nd byte : %u\n", p.ch2[0]);
    printf("3rd byte : %u\n", p.ch2[1]);
    printf("4th byte : %u\n", p.ch3);

    printf("\nInteger : %d", toInteger(p));
    return 0;
}


Q5:
#include <stdio.h>

// Function to check the Endianness of the host machine
int isLittleEndian() {
    int num = 1;
    char *ptr = (char *)&num;
    return (*ptr == 1);
}

// Function to print the content of each byte location
void printByteContent(int num) {
    char *ptr = (char *)&num;
    printf("Byte content:\n");
    for (int i = 0; i < sizeof(int); i++) {
        printf("Byte %d: 0x%02x\n", i, ptr[i]);
    }
}

// Function to convert the Endianness of the number
int convertEndianness(int num) {
    char *inPtr = (char *)&num;
    char outArr[sizeof(int)];

    for (int i = 0; i < sizeof(int); i++) {
        outArr[i] = inPtr[sizeof(int) - i - 1];
    }

    int *outPtr = (int *)outArr;
    return *outPtr;
}

int main() {
    int num;

    printf("Enter a number: ");
    scanf("%d", &num);

    printf("\n");

    if (isLittleEndian()) {
        printf("Host machine is Little Endian.\n");
    } else {
        printf("Host machine is Big Endian.\n");
    }

    printByteContent(num);

    int convertedNum = convertEndianness(num);
    printf("\nConverted Endianness: %d\n", convertedNum);

    return 0;
}